datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider = "prisma-erd-generator"
    output   = "./er-generated.md"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    profiles        Profile[]
    ownedWorkspaces Workspace[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String

    lastActiveWorkspaceId String

    tags        PermissionTag[]
    workspaces  Workspace       @relation(fields: [workspaceId], references: [id])
    workspaceId String
}

model PermissionTag {
    id   String @id @default(cuid())
    name String

    profiles Profile[]

    workspace   Workspace? @relation(fields: [workspaceId], references: [id])
    workspaceId String?
}

model Workspace {
    id     String @id @default(cuid())
    name   String
    userId String
    owner  User   @relation(fields: [userId], references: [id])

    tags     PermissionTag[]
    profiles Profile[]
    items    ToDoneItem[]
    labels   Label[]
}

model ToDoneItem {
    id          String    @id @default(cuid())
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String

    labels Label[]
}

model Label {
    id String @id @default(cuid())

    items       ToDoneItem[]
    Workspace   Workspace?   @relation(fields: [workspaceId], references: [id])
    workspaceId String?
}
